AWSTemplateFormatVersion: '2010-09-09'
Description: Gpu Ecs Spot Fleet
Parameters:
  InstanceType:
    Type: String
    Default: p2.xlarge
  SpotPrice:
    Type: String  
  TargetCapacity:
    Type : Number
    Default: 1
  KeyName:
    Type: String
  Purpose:
    Type: String         
Mappings:
  AmazonLinuxAMI:
    us-east-2: { AMI: ami-64300001 }
    us-east-1: { AMI: ami-aff65ad2 }
    us-west-2: { AMI: ami-40ddb938 }
    us-west-1: { AMI: ami-69677709 }
    eu-west-3: { AMI: ami-250eb858 }
    eu-west-2: { AMI: ami-2218f945 }
    eu-west-1: { AMI: ami-2d386654 }
    eu-central-1: { AMI: ami-9fc39c74 }
    ap-northeast-2: { AMI: ami-9d56f9f3 }
    ap-northeast-1: { AMI: ami-a99d8ad5 }
    ap-southeast-2: { AMI: ami-efda148d }
    ap-southeast-1: { AMI: ami-846144f8 }
    ca-central-1: { AMI: ami-897ff9ed }
    ap-south-1: { AMI: ami-72edc81d }
    sa-east-1: { AMI: ami-4a7e2826 }
Resources:
  CloudWatchLogsGroup:
    Properties: {RetentionInDays: 1}
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${Purpose}-ecs-lg"
      RetentionInDays: 3
  EcsCluster: 
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref Purpose
  SnsTopic: 
    Type: "AWS::SNS::Topic"
    Properties: 
      TopicName: !Sub "${Purpose}-ecs-termination"  
  S3BucketResults:
    Properties: {AccessControl: BucketOwnerFullControl}
    Type: AWS::S3::Bucket   
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Security Group
      VpcId: !ImportValue DevVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1000 
          ToPort: 9999    
          CidrIp: 0.0.0.0/0          
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0            
  InstanceProfile:
    DependsOn: InstanceRole
    Properties:
      Path: /
      Roles:
      - {Ref: InstanceRole}
    Type: AWS::IAM::InstanceProfile
  InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role']
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - {Ref: S3BucketResults}
          - Action: ['s3:PutObject', 's3:GetObject', 's3:DeleteObject']
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - {Ref: S3BucketResults}
                - /*
          - Action: ['ecr:DescribeRepositories', 'ecr:ListImages', 'ecr:InitiateLayerUpload',
              'ecr:UploadLayerPart', 'ecr:CompleteLayerUpload', 'ecr:PutImage']
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:ecr:'
                - {Ref: 'AWS::Region'}
                - ':'
                - {Ref: 'AWS::AccountId'}
                - :repository/*
          Version: '2012-10-17'
        PolicyName: ecs-withs3-instance-policy
    Type: AWS::IAM::Role      
  IamFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service : ['spotfleet.amazonaws.com']
      Path: "/"
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole']              
  SpotFleet:
    Type: "AWS::EC2::SpotFleet"
    DependsOn:
      - IamFleetRole
      - InstanceProfile
      - EcsCluster	
    Properties: 
      SpotFleetRequestConfigData: 
        SpotPrice: !Ref SpotPrice
        TargetCapacity: !Ref TargetCapacity
        AllocationStrategy: lowestPrice
        IamFleetRole: !GetAtt IamFleetRole.Arn
        LaunchSpecifications:
          - EbsOptimized: 'false'
            KeyName: !Ref KeyName
            ImageId:
              Fn::FindInMap: 
                - AmazonLinuxAMI
                - {Ref: 'AWS::Region'}
                - AMI
            InstanceType: !Ref InstanceType
            SubnetId: 
              Fn::Join:
                - ','
                - - !ImportValue MySubNet
            WeightedCapacity: 1
            IamInstanceProfile: {Arn: !GetAtt InstanceProfile.Arn}
            SecurityGroups: 
              - {GroupId: !Ref InstanceSecurityGroup}           
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash -xe
                  export PATH=/usr/local/bin:$PATH
                  yum -y install jq
                  easy_install pip
                  pip install awscli
                  aws configure set default.region ${AWS::Region}
                  
                  cat <<'EOF' >> /etc/ecs/ecs.config
                  ECS_CLUSTER=${EcsCluster}
                  ECS_ENABLE_CONTAINER_METADATA=true
                  EOF

                  cat <<EOF > /tmp/awslogs.conf

                  [general]
                  state_file = /var/awslogs/state/agent-state

                  [/var/log/dmesg]
                  file = /var/log/dmesg
                  log_group_name = ${CloudWatchLogsGroup}
                  log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg
                  initial_position = start_of_file

                  [/var/log/messages]
                  file = /var/log/messages
                  log_group_name = ${CloudWatchLogsGroup}
                  log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages
                  datetime_format = %b %d %H:%M:%S
                  initial_position = start_of_file

                  [/var/log/docker]
                  file = /var/log/docker
                  log_group_name = ${CloudWatchLogsGroup}
                  log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker
                  datetime_format = %Y-%m-%dT%H:%M:%S.%f
                  initial_position = start_of_file

                  [/var/log/ecs/ecs-init.log]
                  file = /var/log/ecs/ecs-init.log.*
                  log_group_name = ${CloudWatchLogsGroup}
                  log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log
                  datetime_format = %Y-%m-%dT%H:%M:%SZ
                  initial_position = start_of_file

                  [/var/log/ecs/ecs-agent.log]
                  file = /var/log/ecs/ecs-agent.log.*
                  log_group_name = ${CloudWatchLogsGroup}
                  log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log
                  datetime_format = %Y-%m-%dT%H:%M:%SZ
                  initial_position = start_of_file

                  [/var/log/ecs/audit.log]
                  file = /var/log/ecs/audit.log.*
                  log_group_name = ${CloudWatchLogsGroup}
                  log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log
                  datetime_format = %Y-%m-%dT%H:%M:%SZ
                  initial_position = start_of_file

                  EOF

                  cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
                  python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf

                  cat <<EOF > /etc/init/cloudwatch-logs-start.conf
                  description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
                  author "Amazon Web Services"
                  start on started ecs

                  script

                  exec 2>>/var/log/cloudwatch-logs-start.log

                  set -x

                  until curl -s http://localhost:51678/v1/metadata; do sleep 1; done
                  ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
                  CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
                  sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf
                  sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf
                  chkconfig awslogs on
                  service awslogs start
                  end script

                  EOF

                  cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf

                  description "Start spot instance termination handler monitoring script"
                  author "Amazon Web Services"
                  start on started ecs
                  script

                  echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid
                  exec /usr/local/bin/spot-instance-termination-notice-handler.sh
                  end script

                  pre-start script

                  logger "[spot-instance-termination-notice-handler.sh]: spot instance termination notice handler started"

                  end script

                  EOF

                  cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh

                  #!/bin/bash
                  while sleep 5; do

                  if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                  then
                  /bin/false
                  else
                  logger "[spot-instance-termination-notice-handler.sh]: spot instance termination notice detected"

                  STATUS=DRAINING
                  ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
                  CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")

                  logger "[spot-instance-termination-notice-handler.sh]: putting instance in state \$STATUS"
                  logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS"
                  /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
                  logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws sns publish --topic-arn ${SnsTopic} --message \"Spot instance termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE. Putting instance in state \$STATUS.\""
                  /usr/local/bin/aws sns publish --topic-arn ${SnsTopic} --message "Spot instance termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE. Putting instance in state \$STATUS."
                  logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."

                  sleep 120

                  fi
                  done
                  EOF
                  chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh
                  
                  cat <<EOF > /etc/docker/daemon.json
                  {
                    "default-runtime": "nvidia",
                    "runtimes": {"nvidia": {"path": "/usr/bin/nvidia-container-runtime","runtimeArgs": []}}
                  }
                  EOF

                  yum update -y
                  mkdir /etc/downloads
                  touch /etc/onetime.log
                  cat <<EOF > /usr/local/bin/onetime.sh
                  #!/bin/sh
                  echo "installing gpu driver and pre-requisite" >> /etc/onetime.log
                  yum install -y gcc 
                  export kernel_devel_pkg="kernel-devel-\$(uname -r)"                 
                  echo "kernel-devel package - \$kernel_devel_pkg"
                  yum install -y \$kernel_devel_pkg                 
                  export version=384.111
                  export arch=\$(uname -m)
                  export driverSource="http://us.download.nvidia.com/XFree86/Linux-\$arch/\$version/NVIDIA-Linux-\$arch-\$version.run"
                  echo "downloading from \$driverSource"
                  curl -fS -o /etc/downloads/NVIDIA-Linux-\$arch-\$version.run \$driverSource 
                  chmod a+x /etc/downloads/NVIDIA-Linux-\$arch-\$version.run 
                  bash /etc/downloads/NVIDIA-Linux-\$arch-\$version.run -silent
                  nvidia-persistenced
                  nvidia-smi --auto-boost-default=0
                  nvidia-smi -ac 2505,875
                  curl -s -L https://nvidia.github.io/nvidia-container-runtime/amzn1/nvidia-container-runtime.repo | tee /etc/yum.repos.d/nvidia-container-runtime.repo
                  yum install nvidia-container-runtime -y
                  /sbin/service docker restart
                  /sbin/start ecs  
                  echo "echo \"nothing to do\" >> /etc/onetime.log" > /usr/local/bin/onetime.sh
                  EOF
                  chmod +x /usr/local/bin/onetime.sh
                  echo "@reboot /usr/local/bin/onetime.sh 2>&1|tee -a /etc/onetime.log"|crontab
                  reboot
Outputs:
  AwsRegionName:
    Description: The name of the AWS Region your template was launched in
    Value:
      Ref: AWS::Region
    Export:
      Name: !Sub  "${AWS::StackName}-region" 
  CloudWatchLogsGroupName:
    Description: Name of the CloudWatch Logs Group
    Value:
      Ref: CloudWatchLogsGroup
    Export:
      Name: !Sub  "${AWS::StackName}-lg"       
  EcsCluster:
    Description: The name of the ECS cluster
    Value:
      Ref: EcsCluster
    Export:
      Name: !Sub  "${AWS::StackName}-ecs"
  SnsTopic:
    Description: SNS Topic ARN
    Value:
      Ref: SnsTopic
    Export:
      Name: !Sub  "${AWS::StackName}-snstopic"      
  SpotFleetRequestId:
    Description: The Spot fleet Request Id
    Value:
      Ref: SpotFleet
    Export:
      Name: !Sub  "${AWS::StackName}-spotfleetrequest"      